bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 50               #How long the BT executor will sleep between tick cycles in (ms).
    default_server_timeout: 20         #How long the BT navigator will wait (s) for any action server (e.g. planner, controller) to become available at startup.
    wait_for_service_timeout: 1000     #When the BT tree invokes a ROS service (e.g. “clear costmap” service), this is how long it will block waiting for that service to appear.
    plugin_lib_names:                  #List of plugin libraries to load. If we want to change the behavior of the BT navigator, we can add or remove plugin libraries here.
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:      #Keep if we need to call the navigate_through_poses action
  ros__parameters:    
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:            #Keep if we need to call the navigate_to_pose action
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 15.0                        #How often it checks the following: Query the global plan, Check your robot’s current pose/velocity, Invoke the local planner plugin (e.g. DWB) for a new velocity command.
    min_x_velocity_threshold: 0.01                   #Below this threshold, x-axis velocity commands are clamped to zero
    min_theta_velocity_threshold: 0.01              #Below this threshold, theta-axis velocity commands are clamped to zero
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    progress_checker:                                            #Monitors whether the robot is actually making progress along its path.
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5                              #Required movement radius (m), the distance the robot must move
      movement_time_allowance: 10.0                              #Time allowance (s) for the robot to move the required distance
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25                                    #Distance tolerance (m) to the goal position
      yaw_goal_tolerance: 0.25                                   #Angle tolerance (rad) to the goal orientation
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      # ————— Speed limits —————
      # Linear (m/s)
      min_vel_x:        0.0            # don’t drive backwards
      max_vel_x:        0.50           # your max_linear_speed
      min_vel_y:        0.0            # non-holonomic
      max_vel_y:        0.0
      # Angular (rad/s)
      min_vel_theta:    0.0
      max_vel_theta:    1.20           # your max_angular_speed

      # ————— Acceleration limits —————
      # We allow you to accelerate to top speed in ~0.5 s
      acc_lim_x:        1.0            # m/s² (0 → 0.5 m/s in 0.5 s)
      decel_lim_x:     -1.0            # braking
      acc_lim_theta:    2.4            # rad/s² (0 → 1.2 rad/s in 0.5 s)
      decel_lim_theta: -2.4            # angular brake

      #The number of discrete velocity values DWB will sample in the forward (x), lateral (y), and rotational (θ) dimensions when generating candidate trajectories.
      vx_samples: 8
      vy_samples: 1
      vtheta_samples: 8
      sim_time: 1.2                                     #How many seconds into the future each sampled trajectory is forward-simulated.
      linear_granularity: 0.05                          #Step size (m) between collision checks along each simulated trajectory.
      angular_granularity: 0.05                         #Step size (rad) between orientation checks.
      transform_tolerance: 0.2                          #How long (s) DWB will wait for the required TF (odom→base_link) when simulating.
      xy_goal_tolerance: 0.25                           #How close you must get laterally/longitudinally to the goal before DWB considers you “at” it.
      trans_stopped_velocity: 0.05                      #Velocity below which you count as “stopped.”
      short_circuit_trajectory_evaluation: True         #As soon as a trajectory’s cost exceeds your “lethal” threshold, stop evaluating its remaining critics. "True" speeds up pruning of clearly bad paths in cluttered scenes
      stateful: True                                    #Once you enter goal tolerance, keep the “goal reached” state even if you drift out slightly.
      
      #Critics: By tuning each critic’s weight, you shape your robot’s “personality” #THINK - adjust the weights to get the desired behavior
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale:       0.05
      PathAlign.scale:          16.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale:          20.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale:           16.0
      GoalDist.scale:           20.0
      RotateToGoal.scale:       32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.025
      robot_radius: 0.22
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        subscribe_to_updates: True
        map_topic: /map
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False                             #Set to true if you are using a simulation
      robot_radius: 0.22
      resolution: 0.025
      track_unknown_space: true                       #Treats unexplored areas (value -1) as unknown. Seen in Rviz. #THINK
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:                 
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True                                 #Set to false if you want a static map
        footprint_clearing_enabled: True              #Clears any cells under the robot’s footprint on every update (so you don’t “trap” yourself against a wall).
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True                              #Whether to raytrace back from sensor origin to clear out free space behind obstacles (e.g. through laser fan).
          marking: True                               #Whether detected points become occupied cells in the costmap.
          data_type: "LaserScan"
          min_obstacle_height: 0.0                    #Don’t add returns below this height (m).
          max_obstacle_height: 2.0                    #Don’t add returns above this height (m).
          raytrace_max_range: 3.5                     #Don’t clear cells beyond this range (m).
          raytrace_min_range: 0.5                     #Don’t clear cells closer than this range (m).
          obstacle_max_range: 3.0                     #Don’t mark obstacles beyond this range (m).
          obstacle_min_range: 0.5                     #Don’t mark obstacles closer than this range (m).
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: /map
        map_subscribe_transient_local: True             #Makes sure it get the map as soon as it is available
        subscribe_to_updates: True                      #Updates the map continuously
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True                # Turns the Inflation Layer on or off. When false, Nav2 will not apply any inflation gradient around obstacles at all—only the raw obstacle footprint will be used.
        inflation_radius: 0.55       # how far (meters) to “inflate” around each obstacle
        cost_scaling_factor: 3.0     # larger → costs drop off more sharply with distance
        inflate_unknown: False                   #If true, any unknown cells (i.e. neither marked free nor occupied in the costmap) are treated as lethal obstacles and then inflated like normal obstacles.
        inflate_around_unknown: False            #If true, even when inflate_unknown is false, Nav2 will still apply the inflation gradient around unknown cells—so you get a “soft buffer” at the boundary of unmapped areas.
      always_send_full_costmap: True

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0                            #Timeout while waiting for map data
    free_thresh_default: 0.25                        #Pixel value below this → free space
    occupied_thresh_default: 0.65                    #Pixel value above this → occupied space
    map_subscribe_transient_local: True              

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 1.0
      use_astar: false
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.0, 1.0]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0