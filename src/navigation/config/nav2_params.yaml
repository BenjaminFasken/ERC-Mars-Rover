bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    default_nav_to_pose_bt_xml: /opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml # or $(find-pkg-share my_package)/behavior_tree/my_nav_to_pose_bt.xml
    default_nav_through_poses_bt_xml: /opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml # or $(find-pkg-share my_package)/behavior_tree/my_nav_through_poses_bt.xml
    bt_loop_duration: 50               #How long the BT executor will sleep between tick cycles in (ms).
    default_server_timeout: 20         #How long the BT navigator will wait (s) for any action server (e.g. planner, controller) to become available at startup.
    wait_for_service_timeout: 1000     #When the BT tree invokes a ROS service (e.g. “clear costmap” service), this is how long it will block waiting for that service to appear.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:      #Keep if we need to call the navigate_through_poses action
  ros__parameters:    
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:            #Keep if we need to call the navigate_to_pose action
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 15.0                        #How often it checks the following: Query the global plan, Check your robot’s current pose/velocity, Invoke the local planner plugin (e.g. DWB) for a new velocity command.
    min_x_velocity_threshold: 0.01                   #Below this threshold, x-axis velocity commands are clamped to zero
    min_theta_velocity_threshold: 0.01              #Below this threshold, theta-axis velocity commands are clamped to zero
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]          # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    progress_checker:                                            #Monitors whether the robot is actually making progress along its path.
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1                              #Required movement radius (m), the distance the robot must move
      movement_time_allowance: 30.0                              #Time allowance (s) for the robot to move the required distance
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25                                    #Distance tolerance (m) to the goal position
      yaw_goal_tolerance: 0.25                                  #Angle tolerance (rad) to the goal orientation
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5
      lookahead_dist: 0.6
      min_lookahead_dist: 0.3
      max_lookahead_dist: 0.9
      lookahead_time: 1.5
      rotate_to_heading_angular_vel: 2.0 #changed from 1.2
      transform_tolerance: 0.1
      use_velocity_scaled_lookahead_dist: false
      min_approach_linear_velocity: 0.05
      approach_velocity_scaling_dist: 0.8
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.0
      use_regulated_linear_velocity_scaling: true
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 0.25
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.01
      regulated_linear_scaling_min_speed: 0.25
      use_rotate_to_heading: true
      allow_reversing: false
      rotate_to_heading_min_angle: 0.785
      max_angular_accel: 3.2
      max_robot_pose_search_dist: 10.0



local_costmap:
  local_costmap:
    ros__parameters:
      # — Core timing & frames —
      update_frequency: 5.0           # Hz at which all layers (voxel, static, inflation) are updated
      publish_frequency: 2.0          # Hz at which the combined costmap is published (e.g. to RViz)
      global_frame: odom              # local costmap lives in the odom frame
      robot_base_frame: base_link     # where the robot footprint is centered
      use_sim_time: False             

      # — Size & resolution —
      rolling_window: true            # the costmap “window” moves with the robot
      width: 3                        # meters across (x dimension)
      height: 3                       # meters across (y dimension)
      resolution: 0.025               # grid cell size (m) — matches your global 0.025  

      # — Footprint for inflation & clearing —
      footprint: "[[-0.2125, -0.224], [0.2125, -0.224], [0.2125, 0.224], [-0.2125, 0.224]]" # The footprint of the robot in meters
      #footprint: "[[-0.25, -0.26], [0.25, -0.26], [0.25, 0.26], [-0.25, 0.26]]" #Footprint with small buffer zone
      plugins: ["static_layer", "inflation_layer", "voxel_layer"]
      # 1) Inflation Layer
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True 
        cost_scaling_factor: 2.0      # how steeply costs decay from obstacles
        inflation_radius: 0.55       # how far (m) to inflate around each obstacle
        inflate_unknown: True                   #If true, any unknown cells (i.e. neither marked free nor occupied in the costmap) are treated as lethal obstacles and then inflated like normal obstacles.
        inflate_around_unknown: False            #If true, even when inflate_unknown is false, Nav2 will still apply the inflation gradient around unknown cells—so you get a “soft buffer” at the boundary of unmapped areas.

      # 2) Voxel Layer (3D → 2D projection for LiDAR/pointcloud)
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        footprint_clearing_enabled: true       
        enabled: True
        publish_voxel_map: True       # makes the 3D voxel markers show in RViz  
        origin_z: 0.0                 # ground plane origin for your voxels
        z_resolution: 0.05            # height resolution per voxel cell
        z_voxels: 16                  # how many vertical voxels (≈0.8 m tall stack)
        max_obstacle_height: 3.0      # ignore anything taller
        mark_threshold: 0             # number of “hits” before marking a cell occupied  

        # Use your LiDAR scan as the observation source
        observation_sources: scan
        scan:
          topic: /scan
          data_type: "LaserScan"
          marking: True               # mark occupied cells where beams hit
          clearing: True              # clear free cells along the beam path
          raytrace_min_range: 0.0
          raytrace_max_range: 3.0
          obstacle_min_range: 0.0
          obstacle_max_range: 2.5

      # 3) Static Layer (bring in the map geometry around you)
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: /map
        map_subscribe_transient_local: True  # grab the latched map immediately
        subscribe_to_updates: True           # keep it in sync if /map updates

      always_send_full_costmap: True   # publish the full grid each cycle, not just diffs

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False                             #Set to true if you are using a simulation
      footprint: "[[-0.2125, -0.224], [0.2125, -0.224], [0.2125, 0.224], [-0.2125, 0.224]]" # The footprint of the robot in meters
      #footprint: "[[-0.25, -0.26], [0.25, -0.26], [0.25, 0.26], [-0.25, 0.26]]" #Footprint with small buffer zone
      resolution: 0.025
      track_unknown_space: true                       #Treats unexplored areas (value -1) as unknown. Seen in Rviz. #TODO
      plugins: ["static_layer", "voxel_layer", "inflation_layer"]
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        footprint_clearing_enabled: true       
        enabled: True
        publish_voxel_map: True       # makes the 3D voxel markers show in RViz  
        origin_z: 0.0                 # ground plane origin for your voxels
        z_resolution: 0.05            # height resolution per voxel cell
        z_voxels: 16                  # how many vertical voxels (≈0.8 m tall stack)
        max_obstacle_height: 3.0      # ignore anything taller
        mark_threshold: 0             # number of “hits” before marking a cell occupied  

        # Use your LiDAR scan as the observation source
        observation_sources: scan
        scan:
          topic: /scan
          data_type: "LaserScan"
          marking: True               # mark occupied cells where beams hit
          clearing: True              # clear free cells along the beam path
          raytrace_min_range: 0.0
          raytrace_max_range: 3.0
          obstacle_min_range: 0.0
          obstacle_max_range: 2.5
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: /map
        map_subscribe_transient_local: True             #Makes sure it get the map as soon as it is available
        subscribe_to_updates: True                      #Updates the map continuously
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True                # Turns the Inflation Layer on or off. When false, Nav2 will not apply any inflation gradient around obstacles at all—only the raw obstacle footprint will be used.
        inflation_radius: 0.55       # how far (meters) to “inflate” around each obstacle
        cost_scaling_factor: 2.0     # larger → costs drop off more sharply with distance
        inflate_unknown: True                   #If true, any unknown cells (i.e. neither marked free nor occupied in the costmap) are treated as lethal obstacles and then inflated like normal obstacles.
        inflate_around_unknown: False            #If true, even when inflate_unknown is false, Nav2 will still apply the inflation gradient around unknown cells—so you get a “soft buffer” at the boundary of unmapped areas.
      always_send_full_costmap: True

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0                            #Timeout while waiting for map data
    free_thresh_default: 0.25                        #Pixel value below this → free space
    occupied_thresh_default: 0.65                    #Pixel value above this → occupied space
    map_subscribe_transient_local: True   

planner_server:
  ros__parameters:
    planner_plugins: ["SmacHybrid"]
    use_sim_time: False       # match your real‐robot global_costmap

    SmacHybrid:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"

      # — Map downsampling —
      downsample_costmap: false     # keep full resolution for accuracy
      downsampling_factor: 1        # no change

      # — Goal tolerance & unknown space —
      tolerance: 0.20               # 0.20 m: allow “good enough” near-goal in rocky terrain
      allow_unknown: true          # avoid driving into unmapped areas 

      # — Search limits —
      max_iterations: 500000       # cap total expansions to bail out if unreachable
      max_on_approach_iterations: 1000  # once within tolerance, try a bit more for exact path
      max_planning_time: 5.0        # seconds budget per global plan

      # — Motion model & discretization —
      motion_model_for_search: "REEDS_SHEPP"   # allows forward & reverse arcs (better for diff-drive)
      minimum_turning_radius: 0.148           # half your 0.296 m wheel base (m)
      angle_quantization_bins: 64             # 5° bins → faster, coarse heading search

      # — Analytic expansions (fast shortcuts) —
      analytic_expansion_ratio: 3.0           # how often to try a quick straight‐line solve
      analytic_expansion_max_length: 0.8      # max 2 m shortcut (don’t cut across huge gaps)
      analytic_expansion_max_cost: 10.0      # forbid shortcuts through very high cost cells
      analytic_expansion_max_cost_override: false

      # — Cost penalties (shape your path) —
      reverse_penalty:      5000.0  # Heuristic penalty applied to SE2 node if searching in reverse direction.
      change_penalty:       1.0    # Disabled to guarantee the admissibility of the Hybrid-A\* planner.
      non_straight_penalty: 1.2    # Heuristic penalty to apply if the motion at an SE2 node is non-straight.
      cost_penalty:         20.0    # Heuristic penalty to apply at each SE2 node for accumulated cost. Allows Hybrid-A\* to be cost-aware.
      retrospective_penalty: 0.00   # Causes Hybrid-A* to prefer later maneuvers before earlier ones along the path. Must be >= 0.0 and <= 1.0. Must be 0.0 to be fully admissible.

      # — Heuristic caching & performance —
      lookup_table_size:          20.0   # meters of Dubin/Reeds-Shepp distance you cache
      cache_obstacle_heuristic:   false  # non-static map → no cache
      downsample_obstacle_heuristic: true #TODO 
      use_quadratic_cost_penalty: false
      allow_primitive_interpolation: false
      debug_visualizations: false         # off for normal runs  #TODO - set to false when not testing, as it is very computationally expensive

      goal_heading_mode: "DEFAULT"
      # — Post‐planning smoothing —
      smooth_path: true
      smoother:
        max_iterations:   200
        w_smooth:         0.4
        w_data:           0.25
        tolerance:        1e-6
        do_refinement:    true
        refinement_num:   1

smoother_server:                  
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-6
      max_its: 200
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw_blanc    #Make it a blank costmap or nothing
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.2
    min_rotational_vel: 0.1
    rotational_acc_lim: 2.4

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 10                 # Hz at which it checks “have we reached the current waypoint?”
    stop_on_failure: false        # if true, abort the entire waypoint list when one fails
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0 # seconds to pause at each waypoint

velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 15.0
    scale_velocities: False                 #if "False", the smoother will not scale the velocities.
    feedback: "OPEN_LOOP"
    #max_velocity: [0.50, 0.0, 1.20]
    #min_velocity: [-0.50, 0.0, -1.20]
    max_velocity: [0.35, 0.0, 0.90]
    min_velocity: [-0.35, 0.0, -0.90]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"                       #Not used because feedback is set to OPEN_LOOP
    odom_duration: 0.1                       #Not used because feedback is set to OPEN_LOOP
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0                    #If no new velocity command is received for this amount of time, the smoother will send 0 commands to the robot.